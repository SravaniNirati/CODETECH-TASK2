# TASK TWO: PREDICTIVE MODELING WITH LINEAR REGRESSION
# Implement a simple linear regression model using a dataset with continuous target variables. Split the data into training and testing sets, train the model on the training data, evaluate its performance using metrics like mean squared error or R-squared, and make predictions on the test set. Visualize the regression line and actual vs. predicted values to assess the model's accuracy

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
import matplotlib.pyplot as plt
import seaborn as sns

# Load the dataset
file_path = 'D:\Documents\Downloads\spotify_tracks.csv'  
data = pd.read_csv(file_path)

# Define the target variable and features (example: 'popularity' as target)
# Ensure to update 'target_variable' and 'feature_columns' as per dataset analysis
target_variable = 'popularity'
feature_columns = ['danceability', 'energy', 'valence']  # Example features

# Drop rows with missing values in relevant columns
data = data.dropna(subset=[target_variable] + feature_columns)

# Split data into features (X) and target (y)
X = data[feature_columns]
y = data[target_variable]

# Split into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Initialize and train the linear regression model
model = LinearRegression()
model.fit(X_train, y_train)

# Make predictions on the test set
y_pred = model.predict(X_test)

# Evaluate the model's performance
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f"Mean Squared Error (MSE): {mse:.2f}")
print(f"R-squared (R2): {r2:.2f}")

# Visualize the regression line for one feature (e.g., 'danceability')
plt.figure(figsize=(10, 6))
plt.scatter(X_test['danceability'], y_test, color='blue', label='Actual Values')
plt.scatter(X_test['danceability'], y_pred, color='red', alpha=0.6, label='Predicted Values')
plt.title('Actual vs Predicted Values (danceability)')
plt.xlabel('Danceability')
plt.ylabel('Popularity')
plt.legend()
plt.show()

# Visualize actual vs predicted values
plt.figure(figsize=(10, 6))
sns.scatterplot(x=y_test, y=y_pred, alpha=0.7, color='green')
plt.title('Actual vs Predicted Values')
plt.xlabel('Actual Popularity')
plt.ylabel('Predicted Popularity')
plt.axline((0, 0), slope=1, color='red', linestyle='--', label='Ideal Fit')
plt.legend()
plt.show()

print("Linear Regression modeling completed.")
